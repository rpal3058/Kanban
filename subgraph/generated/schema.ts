// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class kanbanBoard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save kanbanBoard entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save kanbanBoard entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("kanbanBoard", id.toString(), this);
  }

  static load(id: string): kanbanBoard | null {
    return store.get("kanbanBoard", id) as kanbanBoard | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get instance(): Bytes {
    let value = this.get("instance");
    return value.toBytes();
  }

  set instance(value: Bytes) {
    this.set("instance", Value.fromBytes(value));
  }

  get task(): Array<string> | null {
    let value = this.get("task");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set task(value: Array<string> | null) {
    if (value === null) {
      this.unset("task");
    } else {
      this.set("task", Value.fromStringArray(value as Array<string>));
    }
  }

  get pm(): Bytes {
    let value = this.get("pm");
    return value.toBytes();
  }

  set pm(value: Bytes) {
    this.set("pm", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get details(): string | null {
    let value = this.get("details");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (value === null) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(value as string));
    }
  }

  get funds(): BigInt | null {
    let value = this.get("funds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set funds(value: BigInt | null) {
    if (value === null) {
      this.unset("funds");
    } else {
      this.set("funds", Value.fromBigInt(value as BigInt));
    }
  }
}

export class task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save task entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save task entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("task", id.toString(), this);
  }

  static load(id: string): task | null {
    return store.get("task", id) as task | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get boardID(): string {
    let value = this.get("boardID");
    return value.toString();
  }

  set boardID(value: string) {
    this.set("boardID", Value.fromString(value));
  }

  get taskID(): BigInt {
    let value = this.get("taskID");
    return value.toBigInt();
  }

  set taskID(value: BigInt) {
    this.set("taskID", Value.fromBigInt(value));
  }

  get taskFunds(): BigInt | null {
    let value = this.get("taskFunds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set taskFunds(value: BigInt | null) {
    if (value === null) {
      this.unset("taskFunds");
    } else {
      this.set("taskFunds", Value.fromBigInt(value as BigInt));
    }
  }

  get taskTitle(): string {
    let value = this.get("taskTitle");
    return value.toString();
  }

  set taskTitle(value: string) {
    this.set("taskTitle", Value.fromString(value));
  }

  get taskDetails(): string | null {
    let value = this.get("taskDetails");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set taskDetails(value: string | null) {
    if (value === null) {
      this.unset("taskDetails");
    } else {
      this.set("taskDetails", Value.fromString(value as string));
    }
  }

  get taskAssigned(): Bytes | null {
    let value = this.get("taskAssigned");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set taskAssigned(value: Bytes | null) {
    if (value === null) {
      this.unset("taskAssigned");
    } else {
      this.set("taskAssigned", Value.fromBytes(value as Bytes));
    }
  }

  get taskReviewed(): Bytes | null {
    let value = this.get("taskReviewed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set taskReviewed(value: Bytes | null) {
    if (value === null) {
      this.unset("taskReviewed");
    } else {
      this.set("taskReviewed", Value.fromBytes(value as Bytes));
    }
  }

  get taskClosed(): boolean {
    let value = this.get("taskClosed");
    return value.toBoolean();
  }

  set taskClosed(value: boolean) {
    this.set("taskClosed", Value.fromBoolean(value));
  }

  get taskRequest(): Array<string> | null {
    let value = this.get("taskRequest");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set taskRequest(value: Array<string> | null) {
    if (value === null) {
      this.unset("taskRequest");
    } else {
      this.set("taskRequest", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class request extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save request entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save request entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("request", id.toString(), this);
  }

  static load(id: string): request | null {
    return store.get("request", id) as request | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskID(): string {
    let value = this.get("taskID");
    return value.toString();
  }

  set taskID(value: string) {
    this.set("taskID", Value.fromString(value));
  }

  get requestID(): string {
    let value = this.get("requestID");
    return value.toString();
  }

  set requestID(value: string) {
    this.set("requestID", Value.fromString(value));
  }

  get raiderAddress(): string {
    let value = this.get("raiderAddress");
    return value.toString();
  }

  set raiderAddress(value: string) {
    this.set("raiderAddress", Value.fromString(value));
  }
}
